name: Invalidations
description: 'Evaluate number of invalidations'

inputs:
  test_script:
    description: 'Script to test for invalidations. Defaults to `using Package`'
    required: false
    default: ''
    type: string
  max_invalidations:
    description: 'Maximum number of invalidations to report. Defaults to `0` (no limit)'
    required: false
    default: '0'
    type: number

outputs:
  total: 
    description: "Total number of invalidations"
    value: ${{ steps.invs.outputs.total }}
  deps: 
    description: "Number of invalidations caused by deps"
    value: ${{ steps.invs.outputs.deps }}

runs:
  using: "composite"
  steps: 
    - name: Get package name
      id: info
      run: |
          REPONAME="${{ github.event.repository.name }}"
          PACKAGENAME=${REPONAME%.jl}
          echo "packagename=$PACKAGENAME" >> $GITHUB_OUTPUT
          if [[ '${{ inputs.test_script }}' == '' ]]; then
            TESTSCRIPT="using ${PACKAGENAME}"
          else
            TESTSCRIPT=${{ inputs.test_script }}
          fi
          echo "testscript=$TESTSCRIPT" >> $GITHUB_OUTPUT
      shell: bash
      
    - name: Install SnoopCompile tools
      run: julia --project -e 'using Pkg; Pkg.add(["SnoopCompileCore", "SnoopCompile", "PrettyTables"])'
      shell: bash
    - name: Load package on branch
      id: invs
      run: |
        using SnoopCompileCore
        invalidations = @snoopr begin ${{ steps.info.outputs.testscript }} end
        
        using SnoopCompile
        inv_owned = length(filtermod(${{ steps.info.outputs.packagename }}, invalidation_trees(invalidations)))
        inv_total = length(uinvalidated(invalidations))
        inv_deps = inv_total - inv_owned
        
        @show inv_total, inv_deps

        # Report invalidations summary:
        using PrettyTables  # needed for `report_invalidations` to be defined

        import SnoopCompile: countchildren

        function report_invalidations(io::IO = stdout;
                invalidations,
                n_rows::Int = 10,
                process_filename::Function = x -> x,
            )
            @assert n_rows â‰¥ 0
            trees = reverse(invalidation_trees(invalidations))
            n_total_invalidations = length(uinvalidated(invalidations))
            # TODO: Merge `@info` statement with one below
            invs_per_method = map(trees) do methinvs
                countchildren(methinvs)
            end
            n_invs_total = length(invs_per_method)
            if n_invs_total == 0
                @info "Zero invalidations! ðŸŽ‰"
                return nothing
            end
            nr = n_rows == 0 ? n_invs_total : n_rows
            truncated_invs = nr < n_invs_total
            sum_invs = sum(invs_per_method)
            invs_per_method = invs_per_method[1:min(nr, n_invs_total)]
            trees = trees[1:min(nr, n_invs_total)]
            trunc_msg = truncated_invs ? " (showing $nr functions) " : ""
            @info "$n_total_invalidations methods invalidated for $n_invs_total functions$trunc_msg"
            n_invalidations_percent = map(invs_per_method) do inv
                inv_perc = inv / sum_invs
                Int(round(inv_perc*100, digits = 0))
            end
            meth_name = map(trees) do inv
                "$(inv.method.name)"
            end
            fileinfo = map(trees) do inv
                "$(process_filename(string(inv.method.file))):$(inv.method.line)"
            end
            header = (
                ["<file name>:<line number>", "Function Name", "Invalidations", "Invalidations %"],
                ["", "", "", "(xáµ¢/âˆ‘x)"],
            )
            table_data = hcat(
                fileinfo,
                meth_name,
                invs_per_method,
                n_invalidations_percent,
            )

            PrettyTables.pretty_table(
                io,
                table_data;
                header,
                formatters = PrettyTables.ft_printf("%s", 2:2),
                backend = Val(:html),
                alignment = [:l, :c, :c, :c],
            )
        end

        open(ENV["GITHUB_STEP_SUMMARY"], "a") do io
          report_invalidations(io;
               invalidations,
               process_filename = x -> last(split(x, ".julia/packages/")),
               n_rows = ${{ inputs.max_invalidations }},
          )
        end

        # Set outputs
        open(ENV["GITHUB_OUTPUT"], "a") do io
          println(io, "total=$(inv_total)")
          println(io, "deps=$(inv_deps)")
        end
      shell: julia --color=yes --project=. {0}    
